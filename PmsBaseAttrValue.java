@RestController @RequestMapping(value = "/users")
// 通过这里配置使下面的映射都在/users下 publicclassUserController{// 创建线程安全的Map staticMap<Long,User> users =Collections.synchronizedMap(newHashMap<Long,User>());@RequestMapping(value="/", method=RequestMethod.GET)publicList<User>getUserList(){// 处理"/users/"的GET请求，用来获取用户列表 // 还可以通过@RequestParam从页面中传递参数来进行查询条件或者翻页信息的传递 List<User> r =newArrayList<User>(users.values());return r;}@RequestMapping(value="/", method=RequestMethod.POST)publicStringpostUser(@ModelAttributeUser user){// 处理"/users/"的POST请求，用来创建User // 除了@ModelAttribute绑定参数之外，还可以通过@RequestParam从页面中传递参数         users.put(user.getId(), user);return"success";}@RequestMapping(value="/{id}", method=RequestMethod.GET)publicUsergetUser(@PathVariableLong id){// 处理"/users/{id}"的GET请求，用来获取url中id值的User信息 // url中的id可通过@PathVariable绑定到函数的参数中 return users.get(id);}@RequestMapping(value="/{id}", method=RequestMethod.PUT)publicStringputUser(@PathVariableLong id,@ModelAttributeUser user){// 处理"/users/{id}"的PUT请求，用来更新User信息 User u = users.get(id);         u.setName(user.getName());         u.setAge(user.getAge());         users.put(id, u);return"success";}@RequestMapping(value="/{id}", method=RequestMethod.DELETE)publicStringdeleteUser(@PathVariableLong id){// 处理"/users/{id}"的DELETE请求，用来删除User         users.remove(id);return"success";}}